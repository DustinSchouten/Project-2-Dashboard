<%- include('./partials/head') %>
<p style='display:none' class="data"><%= JSON.stringify(data) %></p>
<h1>Minor Web: Project 2 Dashboard</h1>
<section class="charts_section">
    <section class="chart">
        <h2>Total forked repo's amount:</h2>
        <h3 id="total_repo"></h3>
    </section>
    <section class="chart">
        <h2>Total amount active repo's:</h2>
        <h3 id="total_active"></h3>
    </section>
    <section class="chart">
        <h2>Total amount enabled issues:</h2>
        <h3 id="total_issue"></h3>
    </section>
    <section class="chart">
        <h2>Total characters per repo:</h2>
        <div id="total_sizes_chart"></div>
    </section>
    <section class="chart">
        <h2>Total languages amount per repo:</h2>
        <div id="total_languages_count_chart"></div>
    </section>
    <section class="chart">
        <h2>Total language sizes:</h2>
        <div id="total_languages_sizes_chart"></div>
    </section>
    <section class="chart">
        <h2>Total issues per repo:</h2>
        <div id="total_issues_count_chart"></div>
    </section>
    <section class="chart">
        <h2>Total pull requests per repo:</h2>
        <div id="total_pull_requests_count_chart"></div>
    </section>
    <section id="minutes_elapsed_since_last_update_chart" class="chart">
        <h2>Time elapsed since last update:</h2>
    </section>
</section>

<script>
    function sortArrayByValue(dataArray) {
        let array = Object.keys(dataArray).map(function(value) {
            return [value, dataArray[value]];
        });
        array.sort(function(first, second) {
            return second[1] - first[1];
        });
        dataArraySorted = {}
        array.forEach((value,idx) => {
            dataArraySorted[value[0]] = value[1]
        })
        return dataArraySorted
    }

    function generatePieChart(data,chart_name) {
        let width = 450
            height = 450
            margin = 40

        let radius = Math.min(width, height) / 2 - margin

        let svg = d3.select("#"+chart_name)
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        var colors = ['#EEEB80','#75CAC7','#B6D884','#7B8AC5','#F69C9B'];
        var pie = d3.pie()
        .value(function(d) {return d.value; })
        let data_ready = pie(d3.entries(data))

        let arcGenerator = d3.arc()
        .innerRadius(0)
        .outerRadius(radius)

        svg
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', arcGenerator)
        .attr('fill', function(d){return(colors[d.index])})
        .attr("stroke", "white")
        .style("stroke-width", "1px")
        .style("opacity", 1)

        svg
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
        .append('text')
        .transition()
        .duration(750)
        .text(function(d){ return d.data.key})
        .attr("transform", function(d) {return "translate(" + arcGenerator.centroid(d)[0]*1.25 + ',' + arcGenerator.centroid(d)[1]*1.25 + ")";  })
        .style("text-anchor", "middle")
    }

    function generateBarChart(data,chart_name) {
        let margin = {top: 20, right: 20, bottom: 30, left: 130};
        let svgWidth = 620, svgHeight = 400;
        let height = svgHeight- margin.top- margin.bottom, width = svgWidth - margin.left - margin.right;
        let sourceNames = [], sourceCount = [];

        let x = d3.scaleLinear().rangeRound([0, width]),
            y = d3.scaleBand().rangeRound([0, height]).padding(0.1);
            for(let key in data){
                if(data.hasOwnProperty(key)){
                    sourceNames.push(key);
                    sourceCount.push(parseInt(data[key]));
                }
            }
            x.domain([0, d3.max(sourceCount, function(d) { return d; })]);
            y.domain(sourceNames);

            let svg = d3.select("#"+chart_name).append("svg");
            svg.attr('height', svgHeight)
            .attr('width', svgWidth+35);
            svg = svg.append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")

            svg.append("g")
                .call(d3.axisLeft(y))

            // Create rectangles
            let bars = svg.selectAll('.bar')
                .data(sourceNames)
                .enter()
                .append("g")

            bars.append('rect')
                .attr('class', 'bar')
                .attr("y", function(d) { return y(d); })
                .attr("height", function(d) { return y.bandwidth(); })
                .transition()
                .duration(750)
                .attr("x", function(d) { return 1; })
                .attr("width", function(d){return x(data[d])})

            bars.append("text")
                .attr("y", function(d){
                    return y(d)+svgHeight/25;
                })
                .transition()
                .duration(750)
                .text(function(d) { 
                    return data[d];
                })
                .attr("x", function(d){
                    return x(data[d]) + 5;
                })
                .attr('class', 'value_labels')
    }

    function generateTabletimeElapsed(dataArrayTimeElapsed) {
        console.log(dataArrayTimeElapsed)
        let length = Object.keys(dataArrayTimeElapsed).length;
        let minutes_elapsed_since_last_update_chart = document.querySelector('#minutes_elapsed_since_last_update_chart');
        let html_to_insert = '<table><tr><th>Name</th><th>Days</th><th>Hours</th><th>Minutes</th></tr>';
        for (let idx=0; idx<length; idx++) {
            html_to_insert += '<tr><td>'+dataArrayTimeElapsed[idx]['name']+'</td>'+
                                  '<td>'+dataArrayTimeElapsed[idx]['days']+'</td>'+
                                  '<td>'+dataArrayTimeElapsed[idx]['hours']+'</td>'+
                                  '<td>'+dataArrayTimeElapsed[idx]['minutes']+'</td></tr>';
        }
        html_to_insert += '</table>'
        minutes_elapsed_since_last_update_chart.insertAdjacentHTML('beforeend', html_to_insert);
    }

    const data = JSON.parse(document.querySelector('.data').textContent);
    const forked_repos = data['repository']['forks']['nodes'];
    console.log(forked_repos)
    const amount_of_forked_repos = data['repository']['forkCount'];
    let dataArrayTotalSizes = {};
    let dataArrayTotalLanguagesCount = {};
    let dataArrayTotalLanguagesSizes = {};
    let dataArrayTotalIsssuesCount = {};
    let dataArrayTotalPullRequestsCount = {};
    let dataArrayUpdatedAt = [];
    let hasIssuesEnabledCounter = 0;
    let amount_of_active_repos = 0;
    
    for (let forked_repo_idx=0; forked_repo_idx<forked_repos.length; forked_repo_idx++) {
        const name = forked_repos[forked_repo_idx]['owner']['login'];
        const totalSize = forked_repos[forked_repo_idx]['languages']['totalSize'];
        const totalDifferentLanguages = forked_repos[forked_repo_idx]['languages']['totalCount'];
        const languagesList = forked_repos[forked_repo_idx]['languages']['edges'];      
        const hasIssuesEnabled = forked_repos[forked_repo_idx]['hasIssuesEnabled'];
        const totalIssues = forked_repos[forked_repo_idx]['issues']['totalCount'];
        const totalPullRequests = forked_repos[forked_repo_idx]['pullRequests']['totalCount'];
        const updatedAt = forked_repos[forked_repo_idx]['updatedAt'];


        if (totalSize > 0) {
            amount_of_active_repos += 1;
        }
        if (hasIssuesEnabled) {
            hasIssuesEnabledCounter += 1;
            dataArrayTotalIsssuesCount[name] = totalIssues;
        }
        
        for (let lang_idx=0; lang_idx<languagesList.length; lang_idx++) {
            let language_name = languagesList[lang_idx]['node']['name']
            let language_size = languagesList[lang_idx]['size']
            if (dataArrayTotalLanguagesSizes[language_name] == undefined) {
                dataArrayTotalLanguagesSizes[language_name] = 0;
            }
            dataArrayTotalLanguagesSizes[language_name] += language_size;
        }
        dataArrayTotalSizes[name] = totalSize;
        dataArrayTotalLanguagesCount[name] = totalDifferentLanguages;
        dataArrayTotalPullRequestsCount[name] = totalPullRequests;
        dataArrayUpdatedAt[forked_repo_idx] = {}
        dataArrayUpdatedAt[forked_repo_idx]['name'] = name
        dataArrayUpdatedAt[forked_repo_idx]['updatedAt'] = new Date(updatedAt);
    }

    dataArrayUpdatedAt = dataArrayUpdatedAt.sort((a, b) => b.updatedAt - a.updatedAt)
    dataArrayTimeElapsed = {}
    for (let timestamp_idx=0; timestamp_idx<dataArrayUpdatedAt.length; timestamp_idx++) {
        let name = dataArrayUpdatedAt[timestamp_idx]['name']
        let timeElapsedSinceLastUpdateInMinutes = Math.round((new Date() - dataArrayUpdatedAt[timestamp_idx]['updatedAt'])/1000/60);
        let timeElapsedSinceLastUpdateInHours = Math.floor(timeElapsedSinceLastUpdateInMinutes/60);
        let timeElapsedSinceLastUpdateInDays = Math.floor(timeElapsedSinceLastUpdateInHours/24);

        dataArrayTimeElapsed[timestamp_idx] = {}
        dataArrayTimeElapsed[timestamp_idx]['name'] = name;
        dataArrayTimeElapsed[timestamp_idx]['minutes'] = timeElapsedSinceLastUpdateInMinutes%60;
        dataArrayTimeElapsed[timestamp_idx]['hours'] = timeElapsedSinceLastUpdateInHours%24;
        dataArrayTimeElapsed[timestamp_idx]['days'] = timeElapsedSinceLastUpdateInDays;

    }
    generateTabletimeElapsed(dataArrayTimeElapsed)

    document.querySelector('#total_repo').textContent = amount_of_forked_repos;
    document.querySelector('#total_issue').textContent = hasIssuesEnabledCounter;
    document.querySelector('#total_active').textContent = amount_of_active_repos;

    generateBarChart(sortArrayByValue(dataArrayTotalSizes),'total_sizes_chart')
    generateBarChart(sortArrayByValue(dataArrayTotalLanguagesCount),'total_languages_count_chart')
    generatePieChart(sortArrayByValue(dataArrayTotalLanguagesSizes),'total_languages_sizes_chart')
    generateBarChart(sortArrayByValue(dataArrayTotalIsssuesCount),'total_issues_count_chart')
    generateBarChart(sortArrayByValue(dataArrayTotalPullRequestsCount),'total_pull_requests_count_chart')
    
</script>

<%- include('./partials/foot') %>
